/**
 * Simple script to generate a Table of Contents for the Lemur documentation
 * 
 * This script scans the docs directory and generates a markdown file with links to all documents
 * To use: Run `node docs/scripts/generate-toc.js` from the project root
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

// Get the directory name from the URL of the current module
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Configuration
const docsDir = path.join(__dirname, '..');
const outputFile = path.join(docsDir, 'toc.md');
const excludeDirs = ['scripts']; // Directories to exclude
const fileExtensions = ['.md', '.markdown', '.txt', '.tsx'];

// Function to get the title from a markdown file
function getTitleFromFile(filePath) {
  try {
    const content = fs.readFileSync(filePath, 'utf8');
    const titleMatch = content.match(/^# (.*)$/m);
    return titleMatch ? titleMatch[1] : path.basename(filePath);
  } catch (error) {
    return path.basename(filePath);
  }
}

// Function to process a directory and generate TOC entries
function processDirectory(dir, depth = 0, relativePath = '') {
  const indent = '  '.repeat(depth);
  let toc = '';
  
  const items = fs.readdirSync(dir)
    .filter(item => !item.startsWith('.'))
    .sort((a, b) => {
      // Sort directories first, then files
      const aPath = path.join(dir, a);
      const bPath = path.join(dir, b);
      const aIsDir = fs.statSync(aPath).isDirectory();
      const bIsDir = fs.statSync(bPath).isDirectory();
      
      if (aIsDir && !bIsDir) return -1;
      if (!aIsDir && bIsDir) return 1;
      return a.localeCompare(b);
    });
  
  for (const item of items) {
    const itemPath = path.join(dir, item);
    const itemRelativePath = path.join(relativePath, item);
    const stats = fs.statSync(itemPath);
    
    if (stats.isDirectory()) {
      // Skip excluded directories
      if (excludeDirs.includes(item)) continue;
      
      toc += `${indent}- **${item}/**\n`;
      toc += processDirectory(itemPath, depth + 1, itemRelativePath);
    } else {
      const ext = path.extname(item);
      
      // Only include files with specified extensions
      if (!fileExtensions.includes(ext)) continue;
      
      // Skip TOC file itself and README.md at root
      if (itemPath === outputFile || 
          (item === 'README.md' && depth === 0)) continue;
      
      const title = getTitleFromFile(itemPath);
      toc += `${indent}- [${title}](${itemRelativePath})\n`;
    }
  }
  
  return toc;
}

// Generate the TOC content
function generateTOC() {
  let content = '# Lemur Documentation: Table of Contents\n\n';
  content += 'This file is automatically generated. Do not edit directly.\n\n';
  content += processDirectory(docsDir);
  
  // Add a note about generation time
  content += '\n*Generated on ' + new Date().toISOString() + '*\n';
  
  // Replace escaped newlines with actual newlines
  content = content.replace(/\\n/g, '\n');
  
  return content;
}

// Write the TOC to a file
const tocContent = generateTOC();
fs.writeFileSync(outputFile, tocContent);

console.log(`Table of Contents generated at ${outputFile}`);
